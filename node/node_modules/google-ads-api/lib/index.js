"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const bottleneck_1 = __importDefault(require("bottleneck"));
const crypto_1 = __importDefault(require("crypto"));
const lodash_1 = require("lodash");
const Http_1 = __importDefault(require("./Http"));
const Customer_1 = __importDefault(require("./Customer"));
class GoogleAdsApi {
    /**
     * Creates GoogleAdsApi Instance
     * @param client_id  - OAuth2 client ID
     * @param client_secret - OAuth2 client secret
     * @param developer_token - Developer token
     *
     */
    constructor({ client_id, client_secret, developer_token, redis_options }) {
        this.client_id = client_id;
        this.client_secret = client_secret;
        this.developer_token = developer_token;
        const options = {
            minTime: 10,
            id: 'id' +
                crypto_1.default
                    .createHash('md5')
                    .update(developer_token)
                    .digest('hex'),
            /* Clustering options */
            datastore: redis_options ? 'redis' : 'local',
            clearDatastore: false,
            clientOptions: redis_options,
            timeout: 1000 * 60 * 10,
        };
        this.throttler = new bottleneck_1.default(options);
        this.throttler.on('error', err => {
            console.error('Could not connect to redis: ');
            console.error(err);
        });
    }
    /**
     * Creates new Customer instance
     *
     * @param customer_account_id - Client customer (account) ID
     * @param refresh_token - OAuth2 refresh token
     *
     */
    Customer({ customer_account_id, refresh_token, manager_cid, async_account_getter, pre_query_hook, post_query_hook, }) {
        if (!async_account_getter && (!customer_account_id || !refresh_token)) {
            throw new Error('must specify either {customer_account_id, refresh_token, manager_cid} or an async_account_getter');
        }
        if (!async_account_getter) {
            const cid = (customer_account_id || '')
                .toString()
                .split('-')
                .join('');
            const _manager_cid = (manager_cid || '')
                .toString()
                .split('-')
                .join('');
            async_account_getter = () => __awaiter(this, void 0, void 0, function* () {
                return { cid, refresh_token, manager_cid: _manager_cid };
            });
        }
        pre_query_hook = pre_query_hook || lodash_1.noop;
        post_query_hook = post_query_hook || lodash_1.noop;
        const http_controller = new Http_1.default({
            async_account_getter,
            client_id: this.client_id,
            developer_token: this.developer_token,
            client_secret: this.client_secret,
            throttler: this.throttler,
            pre_query_hook,
            post_query_hook,
        });
        return Customer_1.default(http_controller);
    }
}
module.exports = GoogleAdsApi;
