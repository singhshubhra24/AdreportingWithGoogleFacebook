import { Entity, NewEntityConfig } from './Entity';
declare namespace Campaign {
    /**
     * Main Campaign Interface
     * @interface
     */
    interface Campaign extends Entity {
        status: CampaignStatus;
        campaign_budget: string;
        ad_serving_optimization_status: AdServingOptimizationStatus;
        advertising_channel_type: AdvertisingChannelType;
        network_settings: NetworkSettings;
        start_date: string;
        end_date: string;
        serving_status: ServingStatus;
        bidding_strategy_type: string;
        target_spend: TargetSpend;
        segments: CampaignSegments;
    }
    /**
     * Interface for CampaignSegments
     * @interface
     */
    interface CampaignSegments {
        ad_network_type: string;
        date: string;
        day_of_week: string;
        device: string;
        hour: string;
        month: string;
        quarter: string;
        slot: string;
        week: string;
        year: string;
    }
    /**
     * Enum for CampaignStatus
     * @readonly
     * @enum {string}
     */
    enum CampaignStatus {
        UNSPECIFIED = "UNSPECIFIED",
        UNKNOWN = "UNKNOWN",
        ENABLED = "ENABLED",
        PAUSED = "PAUSED",
        REMOVED = "REMOVED"
    }
    /**
     * Enum for ServingStatus
     * @readonly
     * @enum {string}
     */
    enum ServingStatus {
        ENABLED = "ENABLED",
        REMOVED = "REMOVED",
        PAUSED = "PAUSED"
    }
    /**
     * Enum for AdServingOptimizationStatus
     * @readonly
     * @enum {string}
     */
    enum AdServingOptimizationStatus {
        UNSPECIFIED = "UNSPECIFIED",
        UNKNOWN = "UNKNOWN",
        OPTIMIZE = "OPTIMIZE",
        CONVERSION_OPTIMIZE = "CONVERSION OPTIMIZE",
        ROTATE = "ROTATE",
        ROTATE_INDEFINITELY = "ROTATE INDEFINITELY",
        UNAVAILABLE = "UNAVAILABLE"
    }
    /**
     * Enum for AdvertisingChannelType
     * @readonly
     * @enum {string}
     */
    enum AdvertisingChannelType {
        DISPLAY = "DISPLAY",
        HOTEL = "HOTEL",
        SEARCH = "SEARCH",
        SHOPPING = "SHOPPING",
        UNKNOWN = "UNKNOWN",
        UNSPECIFIED = "UNSPECIFIED",
        VIDEO = "VIDEO"
    }
    /**
     * Enum for AdvertisingChannelSubType
     * @readonly
     * @enum {string}
     */
    enum AdvertisingChannelSubType {
        DISPLAY_EXPRESS = "DISPLAY_EXPRESS",
        DISPLAY_GMAIL_AD = "DISPLAY_GMAIL_AD",
        DISPLAY_MOBILE_APP = "DISPLAY_MOBILE_APP",
        DISPLAY_SMART_CAMPAIGN = "DISPLAY_SMART_CAMPAIGN",
        SEARCH_EXPRESS = "SEARCH_EXPRESS",
        SEARCH_MOBILE_APP = "SEARCH_MOBILE_APP",
        SHOPPING_SMART_ADS = "SHOPPING_SMART_ADS",
        UNKNOWN = "UNKNOWN",
        UNSPECIFIED = "UNSPECIFIED",
        VIDEO_ACTION = "VIDEO_ACTION",
        VIDEO_OUTSTREAM = "VIDEO_OUTSTREAM"
    }
    /**
     * Interface for NetworkSettings
     * @interface
     */
    interface NetworkSettings {
        target_google_search: boolean;
        target_search_network: boolean;
        target_content_network: boolean;
        target_partner_search_network: boolean;
    }
    /**
     * Interface for TargetSpend
     * @interface
     */
    interface TargetSpend {
        cpc_bid_ceiling_micros: string | number;
        target_spend_micros?: string | number;
    }
    /**
     * Interface for ManualCpc
     * @interface
     */
    interface ManualCpcy {
        enhanced_cpc_enabled: boolean;
    }
    /**
     * Interface for ManualCpc
     * @interface
     */
    interface ManualCpc {
        enhanced_cpc_enabled: boolean;
    }
    /**
     * Interface for MaximizeConversionValue
     * @interface
     */
    interface MaximizeConversionValue {
        target_roas: string | number;
    }
    /**
     * Interface for PercentCpc
     * @interface
     */
    interface PercentCpc {
        cpc_bid_ceiling_micros?: string | number;
        enhanced_cpc_enabled?: boolean;
    }
    /**
     * Interface for TargetCpa
     * @interface
     */
    interface TargetCpa {
        target_cpa_micros?: string | number;
        cpc_bid_ceiling_micros?: string | number;
        cpc_bid_floor_micros?: string | number;
    }
    /**
     * Interface for TargetRoas
     * @interface
     */
    interface TargetRoas {
        target_cpa_micros?: string | number;
        cpc_bid_ceiling_micros?: string | number;
        cpc_bid_floor_micros?: string | number;
    }
    /**
     * Interface for NewCampaignConfig
     * @interface
     */
    interface NewCampaignConfig extends NewEntityConfig {
        budget_id: string;
        advertising_channel_type: AdvertisingChannelType | keyof typeof AdvertisingChannelType;
        status?: CampaignStatus;
        network_setting?: NetworkSettings;
        advertising_channel_sub_type?: AdvertisingChannelSubType | keyof typeof AdvertisingChannelSubType;
        manual_cpc?: ManualCpc;
        maximize_conversion_value?: MaximizeConversionValue;
        percent_cpc?: PercentCpc;
        target_cpa?: TargetCpa;
        target_roas?: TargetRoas;
        target_spend?: TargetSpend;
    }
}
export = Campaign;
