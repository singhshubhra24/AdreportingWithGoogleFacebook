"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = __importDefault(require(".."));
const config_1 = __importDefault(require("../config"));
jest.setTimeout(30000);
const getRandomCriterionText = () => `test-keyword-${(Math.random() * 1000000 + 1).toFixed(0)}`;
describe('Shared Set Criterions (Keyword)', () => __awaiter(this, void 0, void 0, function* () {
    const lib_instance = new __1.default({
        client_id: config_1.default.client_id,
        client_secret: config_1.default.client_secret,
        developer_token: config_1.default.developer_token,
    });
    const customer = lib_instance.Customer({
        customer_account_id: config_1.default.cid,
        manager_cid: config_1.default.manager_cid,
        refresh_token: config_1.default.refresh_token,
    });
    let criterion_id = '';
    let criterion_id_1 = '';
    let criterion_id_2 = '';
    const keyword_text = getRandomCriterionText();
    const keyword_text_1 = getRandomCriterionText();
    const keyword_text_2 = getRandomCriterionText();
    it('Lists Shared Set Criterions', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const criterions = yield customer.sharedSetCriterions.list();
        expect(criterions).toBeInstanceOf(Array);
    }));
    it('Creates New Shared Set Criterion', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const new_criterion = yield customer.sharedSetCriterions.create({
            shared_set_id: 1788591305,
            keyword: {
                text: keyword_text,
                match_type: 'EXACT',
            },
        });
        expect(new_criterion).toEqual({
            id: expect.any(String),
            resource_name: expect.any(String),
        });
        criterion_id = new_criterion.id;
        done();
    }));
    it('Creates Multiple New Shared Set Criteria', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const new_criteria = yield customer.sharedSetCriterions.create([
            {
                shared_set_id: 1788591305,
                keyword: {
                    text: keyword_text_1,
                    match_type: 'EXACT',
                },
            },
            {
                shared_set_id: 1788591305,
                keyword: {
                    text: keyword_text_2,
                    match_type: 'EXACT',
                },
            },
        ]);
        expect(new_criteria).toContainEqual(expect.objectContaining({
            id: expect.any(String),
            resource_name: expect.any(String),
        }));
        const criteria_ids = new_criteria.map((x, i) => x.id);
        criterion_id_1 = criteria_ids[0];
        criterion_id_2 = criteria_ids[1];
        done();
    }));
    it('Retrieves Single Shared Set', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const criterion = yield customer.sharedSetCriterions.retrieve(criterion_id);
        expect(criterion_id).toContain(criterion.criterion_id);
    }));
    it('Deletes Shared Set Criterion', () => __awaiter(this, void 0, void 0, function* () {
        yield customer.sharedSetCriterions.delete(criterion_id);
        yield customer.sharedSetCriterions.delete(criterion_id_1);
        yield customer.sharedSetCriterions.delete(criterion_id_2);
    }));
}));
