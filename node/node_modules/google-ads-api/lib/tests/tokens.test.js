"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = __importDefault(require(".."));
const config_1 = __importDefault(require("../config"));
jest.setTimeout(30000);
function delay(ms) {
    return new Promise(resolve => {
        setTimeout(() => {
            resolve();
        }, ms);
    });
}
describe('Tokens', () => __awaiter(this, void 0, void 0, function* () {
    const lib_instance = new __1.default({
        client_id: config_1.default.client_id,
        client_secret: config_1.default.client_secret,
        developer_token: config_1.default.developer_token,
    });
    // TODO: finish this
    it('Waits for tokens to be available before querying', () => __awaiter(this, void 0, void 0, function* () {
        const customer = lib_instance.Customer({
            async_account_getter: () => __awaiter(this, void 0, void 0, function* () {
                yield delay(1000);
                return {
                    cid: config_1.default.cid,
                    manager_cid: config_1.default.manager_cid,
                    refresh_token: config_1.default.refresh_token,
                };
            }),
        });
        yield customer.retrieve();
    }));
}));
