"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = __importDefault(require(".."));
const config_1 = __importDefault(require("../config"));
jest.setTimeout(30000);
describe('Reporting', () => __awaiter(this, void 0, void 0, function* () {
    const lib_instance = new __1.default({
        client_id: config_1.default.client_id,
        client_secret: config_1.default.client_secret,
        developer_token: config_1.default.developer_token,
    });
    const customer = lib_instance.Customer({
        customer_account_id: config_1.default.opteo_cid,
        manager_cid: config_1.default.opteo_manager_cid,
        refresh_token: config_1.default.opteo_refresh_token,
    });
    it('Retrieves API Attributes', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(2);
        const data = yield customer.report({
            entity: 'ad_group',
            attributes: ['id', 'name', 'campaign.id'],
            order_by: 'ad_group.id',
            sort_order: 'DESC',
        });
        expect(data).toBeInstanceOf(Array);
        expect(data[0]).toEqual({
            campaign: {
                resource_name: expect.any(String),
                id: expect.any(String),
            },
            resource_name: expect.any(String),
            id: expect.any(String),
            name: expect.any(String),
        });
    }));
    it('Retrieves Metrics', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const data = yield customer.report({
            entity: 'ad_group',
            attributes: ['ad_group.id', 'campaign.id'],
            metrics: ['metrics.clicks', 'conversions', 'cost'],
            order_by: 'id',
        });
        expect(data).toBeInstanceOf(Array);
    }));
    it('Converts Micros', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(2);
        const data = yield customer.report({
            entity: 'ad_group',
            attributes: [
                'id',
                'campaign.id',
                'campaign.target_cpa.target_cpa_micros',
                'campaign.target_spend.target_spend_micros',
            ],
            metrics: ['metrics.clicks', 'conversions', 'metrics.cost_micros', 'cost'],
            constraints: ['ad_group.status = ENABLED', { key: 'cost', op: '>', val: 1 }],
            order_by: 'id',
            convert_micros: true,
        });
        expect(data).toBeInstanceOf(Array);
        expect(data[0].metrics).toEqual({
            clicks: expect.any(Number),
            conversions: expect.any(Number),
            cost_micros: expect.any(Number),
            cost: expect.any(Number),
        });
    }));
    it('Retrieves Segments', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(2);
        const data = yield customer.report({
            entity: 'ad_group',
            attributes: ['ad_group.id', 'campaign.id'],
            segments: ['device'],
            limit: 10,
        });
        expect(data[0]).toEqual({
            campaign: {
                resource_name: expect.any(String),
                id: expect.any(String),
            },
            segments: {
                device: expect.any(String),
            },
            resource_name: expect.any(String),
            id: expect.any(String),
        });
        expect(data).toHaveLength(10);
    }));
    it('Date Constants', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const data = yield customer.report({
            entity: 'ad_group',
            attributes: ['ad_group.id'],
            metrics: ['clicks', 'conversions'],
            date_constant: 'TODAY',
        });
        expect(data).toBeInstanceOf(Array);
    }));
    it('Custom Date Ranges', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const data = yield customer.report({
            entity: 'ad_group',
            attributes: ['ad_group.id'],
            metrics: ['clicks', 'conversions'],
            from_date: '2018-09-01',
            to_date: '2018-09-10',
        });
        expect(data).toBeInstanceOf(Array);
    }));
    it('Constraints as Array of Strings', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const data = yield customer.report({
            entity: 'ad_group',
            attributes: ['ad_group.id', 'campaign.id'],
            metrics: ['clicks', 'conversions'],
            constraints: ['ad_group.status = ENABLED'],
            from_date: '2018-09-01',
            to_date: '2018-09-10',
        });
        expect(data).toBeInstanceOf(Array);
    }));
    it('Constraints as Array of Shorthands', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const data = yield customer.report({
            entity: 'ad_group',
            attributes: ['ad_group.id', 'campaign.id'],
            metrics: ['clicks', 'conversions'],
            constraints: [{ 'ad_group.status': 'ENABLED' }, { 'campaign.id': [1485014801, 1483704368] }],
            date_constant: 'TODAY',
        });
        expect(data).toBeInstanceOf(Array);
    }));
    it('Constraints as Array of Objects', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const data = yield customer.report({
            entity: 'ad_group',
            attributes: ['ad_group.id', 'campaign.id'],
            metrics: ['clicks', 'conversions'],
            constraints: [
                {
                    key: 'ad_group.status',
                    op: '=',
                    val: 'ENABLED',
                },
                {
                    key: 'clicks',
                    op: '>',
                    val: '1',
                },
            ],
            date_constant: 'TODAY',
            limit: 5,
        });
        expect(data).toBeInstanceOf(Array);
    }));
}));
