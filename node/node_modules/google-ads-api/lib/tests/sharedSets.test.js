"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = __importDefault(require(".."));
const config_1 = __importDefault(require("../config"));
jest.setTimeout(30000);
const getRandomSharedSetName = () => `test-list-${(Math.random() * 1000000 + 1).toFixed(0)} (created during library test)`;
describe('Shared Sets', () => __awaiter(this, void 0, void 0, function* () {
    const lib_instance = new __1.default({
        client_id: config_1.default.client_id,
        client_secret: config_1.default.client_secret,
        developer_token: config_1.default.developer_token,
    });
    const customer = lib_instance.Customer({
        customer_account_id: config_1.default.cid,
        manager_cid: config_1.default.manager_cid,
        refresh_token: config_1.default.refresh_token,
    });
    let new_shared_set_id = '';
    // let new_shared_set_id_1 = ''
    // let new_shared_set_id_2 = ''
    it('Lists All Shared Sets', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const shared_sets = yield customer.sharedSets.list({
            limit: 2,
            constraints: ['shared_set.status = ENABLED'],
        });
        expect(shared_sets).toBeInstanceOf(Array);
    }));
    it('Creates New Shared Set', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const new_shared_set = yield customer.sharedSets.create({
            name: getRandomSharedSetName(),
            type: 'NEGATIVE_KEYWORDS',
        });
        expect(new_shared_set).toEqual({
            id: expect.any(String),
            resource_name: expect.any(String),
        });
        new_shared_set_id = new_shared_set.id;
        done();
    }));
    /*  Internal error encountered. The appropriate error code isn't part of
 the API yet. We may not be able to bulk create or edit shared sets
    
    it('Creates 2 New Shared Sets', async done => {
        expect.assertions(1)

        const new_shared_sets_config = [
            {
                name: getRandomSharedSetName(),
                type: 'NEGATIVE_KEYWORDS',
            },
            {
                name: getRandomSharedSetName(),
                type: 'NEGATIVE_KEYWORDS',
            },
        ]
        const new_shared_sets = await customer.sharedSets.create(new_shared_sets_config)

        expect(new_shared_sets).toContainEqual(
            expect.objectContaining({
                id: expect.any(String),
                resource_name: expect.any(String),
            })
        )

        const shared_set_ids = new_shared_sets.map((x: any, i: number) => x.id)

        new_shared_set_id_1 = shared_set_ids[0]
        new_shared_set_id_2 = shared_set_ids[1]
        done()
    }) */
    it('Retrieves Single Shared Set', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const shared_set = yield customer.sharedSets.retrieve(new_shared_set_id);
        expect(shared_set.id).toEqual(new_shared_set_id);
        done();
    }));
    it('Updates Shared Set', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const new_shared_set_name = getRandomSharedSetName();
        yield customer.sharedSets.update({
            id: new_shared_set_id,
            update: {
                name: new_shared_set_name,
            },
        });
        const shared_set = yield customer.sharedSets.retrieve(new_shared_set_id);
        expect(shared_set.name).toBe(new_shared_set_name);
        done();
    }));
    /* it('Updates Multiple Shared Sets', async () => {
        expect.assertions(1)
        const new_shared_set_name_1 = getRandomSharedSetName()
        const new_shared_set_name_2 = getRandomSharedSetName()

        const update_config = [
            {
                id: new_shared_set_id_1,
                update: {
                    name: new_shared_set_name_1,
                },
            },
            {
                id: new_shared_set_id_2,
                update: {
                    name: new_shared_set_name_2,
                },
            },
        ]
        await customer.sharedSets.update(update_config)
        const shared_set_1 = await customer.sharedSets.retrieve(new_shared_set_id_1)
        expect(shared_set_1.name).toBe(new_shared_set_name_1)
        const shared_set_2 = await customer.sharedSets.retrieve(new_shared_set_id_2)
        expect(shared_set_2.name).toBe(new_shared_set_name_2)
    }) */
    it('Deletes Shared Set', (done) => __awaiter(this, void 0, void 0, function* () {
        yield customer.sharedSets.delete(new_shared_set_id);
        const shared_set = yield customer.sharedSets.retrieve(new_shared_set_id);
        expect(shared_set.status).toBe('REMOVED');
        /* await customer.sharedSets.delete(new_shared_set_id_1)
        const shared_set_1 = await customer.sharedSets.retrieve(new_shared_set_id_1)
        expect(shared_set_1.status).toBe('REMOVED')
        await customer.sharedSets.delete(new_shared_set_id_2)
        const shared_set_2 = await customer.sharedSets.retrieve(new_shared_set_id_2)
        expect(shared_set_2.status).toBe('REMOVED') */
        done();
    }));
}));
