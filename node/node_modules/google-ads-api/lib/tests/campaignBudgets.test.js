"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = __importDefault(require(".."));
const config_1 = __importDefault(require("../config"));
jest.setTimeout(30000);
describe('Campaign Budgets', () => __awaiter(this, void 0, void 0, function* () {
    const lib_instance = new __1.default({
        client_id: config_1.default.client_id,
        client_secret: config_1.default.client_secret,
        developer_token: config_1.default.developer_token,
    });
    const customer = lib_instance.Customer({
        customer_account_id: config_1.default.cid,
        manager_cid: config_1.default.manager_cid,
        refresh_token: config_1.default.refresh_token,
    });
    let budget_id = '';
    let budget_id_1 = '';
    let budget_id_2 = '';
    it('Lists All Campaign Budgets', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const budgets = yield customer.campaignBudgets.list();
        expect(budgets).toBeInstanceOf(Array);
    }));
    it('Creates New Campaign Budget', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const budget = yield customer.campaignBudgets.create({
            amount_micros: 12000000,
            explicitly_shared: false,
        });
        expect(budget).toEqual({
            id: expect.any(String),
            resource_name: expect.any(String),
        });
        budget_id = budget.id;
        done();
    }));
    it('Creates 2 New Campaign Budgets', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const budgets = yield customer.campaignBudgets.create([
            {
                amount_micros: 13000000,
                explicitly_shared: false,
            },
            {
                amount_micros: 14000000,
                explicitly_shared: false,
            },
        ]);
        expect(budgets).toContainEqual(expect.objectContaining({
            id: expect.any(String),
            resource_name: expect.any(String),
        }));
        const budget_ids = budgets.map((x, i) => x.id);
        budget_id_1 = budget_ids[0];
        budget_id_2 = budget_ids[1];
        done();
    }));
    it('Retrieves Campaign Budget', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const budget = yield customer.campaignBudgets.retrieve(budget_id);
        expect(budget.id).toEqual(budget_id);
        done();
    }));
    it('Updates Multiple Campaign Budgets', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(2);
        const update_config = [
            {
                id: budget_id_1,
                update: {
                    amount_micros: 16000000,
                },
            },
            {
                id: budget_id_2,
                update: {
                    amount_micros: 17000000,
                },
            },
        ];
        yield customer.campaignBudgets.update(update_config);
        const campaign_budget_1 = yield customer.campaignBudgets.retrieve(budget_id_1);
        expect(campaign_budget_1.amount_micros).toBe('16000000');
        const campaign_budget_2 = yield customer.campaignBudgets.retrieve(budget_id_2);
        expect(campaign_budget_2.amount_micros).toBe('17000000');
        done();
    }));
    it('Deletes Campaign Budget', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(3);
        yield customer.campaignBudgets.delete(budget_id);
        const campaign_budget = yield customer.campaignBudgets.retrieve(budget_id);
        expect(campaign_budget.status).toBe('REMOVED');
        yield customer.campaignBudgets.delete(budget_id_1);
        const campaign_budget_1 = yield customer.campaignBudgets.retrieve(budget_id_1);
        expect(campaign_budget_1.status).toBe('REMOVED');
        yield customer.campaignBudgets.delete(budget_id_2);
        const campaign_budget_2 = yield customer.campaignBudgets.retrieve(budget_id_2);
        expect(campaign_budget_2.status).toBe('REMOVED');
    }));
}));
