"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = __importDefault(require(".."));
const config_1 = __importDefault(require("../config"));
jest.setTimeout(30000);
describe('Campaign Ad Schedules', () => __awaiter(this, void 0, void 0, function* () {
    const lib_instance = new __1.default({
        client_id: config_1.default.client_id,
        client_secret: config_1.default.client_secret,
        developer_token: config_1.default.developer_token,
    });
    const customer = lib_instance.Customer({
        customer_account_id: config_1.default.cid,
        manager_cid: config_1.default.manager_cid,
        refresh_token: config_1.default.refresh_token,
    });
    const campaign_id = 1485014801;
    let criterion_id = '';
    let criterion_id_1 = '';
    let criterion_id_2 = '';
    it('Lists Campaign Ad Schedules', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const criterions = yield customer.campaignAdSchedules.list({
            constraints: [{ 'campaign.id': campaign_id }, { type: 'AD_SCHEDULE' }],
        });
        expect(criterions).toBeInstanceOf(Array);
    }));
    it('Creates New Campaign Ad Schedule', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const new_criterion = yield customer.campaignAdSchedules.create({
            campaign_id,
            ad_schedule: {
                day_of_week: 'FRIDAY',
                start_hour: 10,
                end_hour: 18,
                start_minute: 'ZERO',
                end_minute: 'ZERO',
            },
        });
        expect(new_criterion).toEqual({
            id: expect.any(String),
            resource_name: expect.any(String),
        });
        criterion_id = new_criterion.id;
        done();
    }));
    it('Creates 2 New Campaign Ad Schedules', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(2);
        const new_criteria = yield customer.campaignAdSchedules.create([
            {
                campaign_id,
                ad_schedule: {
                    day_of_week: 'WEDNESDAY',
                    start_hour: 10,
                    end_hour: 18,
                    start_minute: 'ZERO',
                    end_minute: 'ZERO',
                },
            },
            {
                campaign_id,
                ad_schedule: {
                    day_of_week: 'THURSDAY',
                    start_hour: 10,
                    end_hour: 18,
                    start_minute: 'ZERO',
                    end_minute: 'ZERO',
                },
            },
        ]);
        expect(new_criteria).toContainEqual(expect.objectContaining({
            id: expect.any(String),
            resource_name: expect.any(String),
        }));
        const criteria_ids = new_criteria.map((x) => x.id);
        expect(criteria_ids.length).toEqual(2);
        criterion_id_1 = criteria_ids[0];
        criterion_id_2 = criteria_ids[1];
        done();
    }));
    it('Retrieves Single Campaign Ad Schedule', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const ad_schedule = yield customer.campaignAdSchedules.retrieve(criterion_id);
        expect(criterion_id).toContain(ad_schedule.criterion_id);
        done();
    }));
    it('Updates Campaign Ad Schedule', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        yield customer.campaignAdSchedules.update({
            id: criterion_id,
            update: {
                bid_modifier: 0.3,
            },
        });
        const updated_ad_schedule = yield customer.campaignAdSchedules.retrieve(criterion_id);
        expect(updated_ad_schedule.bid_modifier).toEqual(0.3);
    }));
    it('Updates Multiple Campaign Ad Schedules', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(2);
        yield customer.campaignAdSchedules.update([
            {
                id: criterion_id_1,
                update: {
                    bid_modifier: 0.3,
                },
            },
            {
                id: criterion_id_2,
                update: {
                    bid_modifier: 0.2,
                },
            },
        ]);
        const updated_ad_schedule_1 = yield customer.campaignAdSchedules.retrieve(criterion_id_1);
        expect(updated_ad_schedule_1.bid_modifier).toEqual(0.3);
        const updated_ad_schedule_2 = yield customer.campaignAdSchedules.retrieve(criterion_id_2);
        expect(updated_ad_schedule_2.bid_modifier).toEqual(0.2);
    }));
    it('Deletes Campaign Ad Schedule', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(3);
        const res = yield customer.campaignAdSchedules.delete(criterion_id);
        expect(res).toBeInstanceOf(Object);
        const res1 = yield customer.campaignAdSchedules.delete(criterion_id_1);
        expect(res1).toBeInstanceOf(Object);
        const res2 = yield customer.campaignAdSchedules.delete(criterion_id_2);
        expect(res2).toBeInstanceOf(Object);
    }));
}));
