"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = __importDefault(require(".."));
const config_1 = __importDefault(require("../config"));
jest.setTimeout(30000);
describe('AdGroup Ads', () => __awaiter(this, void 0, void 0, function* () {
    const lib_instance = new __1.default({
        client_id: config_1.default.client_id,
        client_secret: config_1.default.client_secret,
        developer_token: config_1.default.developer_token,
    });
    const customer = lib_instance.Customer({
        customer_account_id: config_1.default.cid,
        manager_cid: config_1.default.manager_cid,
        refresh_token: config_1.default.refresh_token,
    });
    let ad_id = '';
    let ad_id_1 = '';
    let ad_id_2 = '';
    const ad_group_id = 56328868446;
    it('Lists All AdGroup Ads', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const ads = yield customer.ads.list();
        expect(ads).toBeInstanceOf(Array);
    }));
    it('Creates New Ad', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const new_ad = yield customer.ads.create({
            ad_group_id,
            ad: {
                final_urls: 'http://hello.com',
                expanded_text_ad: {
                    headline_part1: 'headline part 1 here2',
                    headline_part2: 'headline part 2 here2',
                    description: 'my description here2',
                    path1: 'path one here2',
                    path2: 'path two here2',
                },
            },
        });
        ad_id = new_ad.id;
        expect(new_ad).toEqual({
            id: expect.any(String),
            resource_name: expect.any(String),
        });
        done();
    }));
    it('Creates 2 New Ads', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(2);
        const new_ads_config = [
            {
                ad_group_id,
                ad: {
                    final_urls: 'http://hello.com',
                    expanded_text_ad: {
                        headline_part1: 'headline part 1 here1',
                        headline_part2: 'headline part 2 here1',
                        description: 'my description here1',
                        path1: 'path one here1',
                        path2: 'path two here1',
                    },
                },
            },
            {
                ad_group_id,
                ad: {
                    final_urls: 'http://hello.com',
                    expanded_text_ad: {
                        headline_part1: 'headline part 1 here2',
                        headline_part2: 'headline part 2 here2',
                        description: 'my description here2',
                        path1: 'path one here2',
                        path2: 'path two here2',
                    },
                },
            },
        ];
        const new_ads = yield customer.ads.create(new_ads_config);
        expect(new_ads).toContainEqual(expect.objectContaining({
            id: expect.any(String),
            resource_name: expect.any(String),
        }));
        const ad_ids = new_ads.map((x, i) => x.id);
        expect(ad_ids.length).toEqual(2);
        ad_id_1 = ad_ids[0];
        ad_id_2 = ad_ids[1];
        done();
    }));
    it('Retrieves Single Ad', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const ad = yield customer.ads.retrieve(ad_id);
        expect(ad_id).toContain(ad.ad.id);
        done();
    }));
    it('Updates Ad', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        yield customer.ads.update({
            id: ad_id,
            update: {
                status: 'PAUSED',
            },
        });
        const ad = yield customer.ads.retrieve(ad_id);
        expect(ad.status).toBe('PAUSED');
        done();
    }));
    it('Updates Multiple Ads', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(2);
        yield customer.ads.update([
            {
                id: ad_id_1,
                update: {
                    status: 'PAUSED',
                },
            },
            {
                id: ad_id_2,
                update: {
                    status: 'PAUSED',
                },
            },
        ]);
        const ad1 = yield customer.ads.retrieve(ad_id_1);
        expect(ad1.status).toBe('PAUSED');
        const ad2 = yield customer.ads.retrieve(ad_id_2);
        expect(ad2.status).toBe('PAUSED');
        done();
    }));
    it('Removes Ads', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(3);
        yield customer.ads.delete(ad_id);
        const ad = yield customer.ads.retrieve(ad_id);
        expect(ad.status).toBe('REMOVED');
        yield customer.ads.delete(ad_id_1);
        const ad1 = yield customer.ads.retrieve(ad_id_1);
        expect(ad1.status).toBe('REMOVED');
        yield customer.ads.delete(ad_id_2);
        const ad2 = yield customer.ads.retrieve(ad_id_2);
        expect(ad2.status).toBe('REMOVED');
        done();
    }));
}));
