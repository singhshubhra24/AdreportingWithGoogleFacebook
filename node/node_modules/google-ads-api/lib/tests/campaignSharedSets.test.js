"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = __importDefault(require(".."));
const config_1 = __importDefault(require("../config"));
jest.setTimeout(30000);
describe('Campaign Shared Sets', () => __awaiter(this, void 0, void 0, function* () {
    const lib_instance = new __1.default({
        client_id: config_1.default.client_id,
        client_secret: config_1.default.client_secret,
        developer_token: config_1.default.developer_token,
    });
    const customer = lib_instance.Customer({
        customer_account_id: config_1.default.cid,
        manager_cid: config_1.default.manager_cid,
        refresh_token: config_1.default.refresh_token,
    });
    const campaign_id = 1485014801;
    const shared_set_id = 1788591305;
    const campaign_shared_set = `${campaign_id}_${shared_set_id}`;
    it('Creates New Campaign Shared Set', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const res = yield customer.campaignSharedSets.link({
            campaign_id,
            shared_set_id,
        });
        expect(res.id).toEqual(campaign_shared_set);
        done();
    }));
    it('Lists Campaign Shared Sets', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const shared_sets = yield customer.campaignSharedSets.list();
        expect(shared_sets).toBeInstanceOf(Array);
    }));
    it('Retrieves Single Campaign Shared Set', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const shared_set = yield customer.campaignSharedSets.retrieve(campaign_shared_set);
        expect(shared_set.shared_set).toContain(shared_set_id);
    }));
    it('Unlinks Campaign Shared Set', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        yield customer.campaignSharedSets.delete(campaign_shared_set);
        const shared_set = yield customer.campaignSharedSets.retrieve(campaign_shared_set);
        expect(shared_set.status).toEqual('REMOVED');
    }));
}));
