"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = __importDefault(require(".."));
const config_3 = __importDefault(require("../config"));
jest.setTimeout(30000);
const getRandomCampaignName = () => `test-campaign-${(Math.random() * 1000000 + 1).toFixed(0)} (created during library test)`;
describe('Campaigns', () => __awaiter(this, void 0, void 0, function* () {
    const lib_instance = new __1.default({
        client_id: config_3.default.client_id,
        client_secret: config_3.default.client_secret,
        developer_token: config_3.default.developer_token,
    });
    const customer = lib_instance.Customer({
        customer_account_id: config_3.default.cid,
        manager_cid: config_3.default.manager_cid,
        refresh_token: config_3.default.refresh_token,
    });
    let new_campaign_id = '';
    let new_campaign_id_1 = '';
    let new_campaign_id_2 = '';
    it('Lists All Campaigns', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const campaigns = yield customer.campaigns.list({
            limit: 3,
            constraints: [{ status: 'ENABLED' }],
            order_by: 'id',
        });
        expect(campaigns).toHaveLength(3);
    }));
    it('Creates New Campaign', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const response = yield customer.campaignBudgets.create({
            amount_micros: 12000000,
            explicitly_shared: false,
        });
        const new_campaign = yield customer.campaigns.create({
            name: getRandomCampaignName(),
            budget_id: response.id,
            advertising_channel_type: 'DISPLAY',
            target_spend: {
                cpc_bid_ceiling_micros: 1000000,
            },
        });
        expect(new_campaign).toEqual({
            id: expect.any(String),
            resource_name: expect.any(String),
        });
        new_campaign_id = new_campaign.id;
        done();
    }));
    it('Creates 2 New Campaigns', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(2);
        const response = yield customer.campaignBudgets.create({
            amount_micros: 12000000,
            explicitly_shared: true,
            name: `test-budget-${(Math.random() * 1000000 + 1).toFixed(0)}`,
        });
        const { id } = response;
        const new_campaigns = yield customer.campaigns.create([
            {
                name: getRandomCampaignName(),
                budget_id: id,
                advertising_channel_type: 'DISPLAY',
                target_spend: {
                    cpc_bid_ceiling_micros: 1000000,
                },
            },
            {
                name: getRandomCampaignName(),
                budget_id: id,
                advertising_channel_type: 'SEARCH',
                target_spend: {
                    cpc_bid_ceiling_micros: 1000000,
                },
            },
        ]);
        expect(new_campaigns).toContainEqual(expect.objectContaining({
            id: expect.any(String),
            resource_name: expect.any(String),
        }));
        const campaign_ids = new_campaigns.map((x) => x.id);
        expect(campaign_ids.length).toEqual(2);
        new_campaign_id_1 = campaign_ids[0];
        new_campaign_id_2 = campaign_ids[1];
        done();
    }));
    it('Retrieves Single Campaign', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const campaign = yield customer.campaigns.retrieve(new_campaign_id);
        expect(campaign.id).toEqual(new_campaign_id);
    }));
    it('Updates Campaign Name', () => __awaiter(this, void 0, void 0, function* () {
        const new_campaign_name = getRandomCampaignName();
        const config = {
            id: new_campaign_id,
            update: {
                name: new_campaign_name,
            },
        };
        expect.assertions(1);
        yield customer.campaigns.update(config);
        const campaign = yield customer.campaigns.retrieve(new_campaign_id);
        expect(campaign.name).toBe(new_campaign_name);
    }));
    it('Updates Multiple Campaign Names', () => __awaiter(this, void 0, void 0, function* () {
        const new_campaign_name_1 = getRandomCampaignName();
        const config_1 = {
            id: new_campaign_id_1,
            update: {
                name: new_campaign_name_1,
            },
        };
        const new_campaign_name_2 = getRandomCampaignName();
        const config_2 = {
            id: new_campaign_id_2,
            update: {
                name: new_campaign_name_2,
            },
        };
        expect.assertions(2);
        yield customer.campaigns.update([config_1, config_2]);
        const campaign_1 = yield customer.campaigns.retrieve(new_campaign_id_1);
        expect(campaign_1.name).toBe(new_campaign_name_1);
        const campaign_2 = yield customer.campaigns.retrieve(new_campaign_id_2);
        expect(campaign_2.name).toBe(new_campaign_name_2);
    }));
    it('Deletes Campaign', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(3);
        yield customer.campaigns.delete(new_campaign_id);
        const campaign = yield customer.campaigns.retrieve(new_campaign_id);
        expect(campaign.status).toBe('REMOVED');
        yield customer.campaigns.delete(new_campaign_id_1);
        const campaign1 = yield customer.campaigns.retrieve(new_campaign_id_1);
        expect(campaign1.status).toBe('REMOVED');
        yield customer.campaigns.delete(new_campaign_id_2);
        const campaign2 = yield customer.campaigns.retrieve(new_campaign_id_2);
        expect(campaign2.status).toBe('REMOVED');
    }));
}));
