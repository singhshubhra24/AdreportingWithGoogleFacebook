"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = __importDefault(require(".."));
const config_1 = __importDefault(require("../config"));
jest.setTimeout(30000);
const getRandomAdgroupName = () => `test-adgroup-${(Math.random() * 100 + 1).toFixed(0)} (created during library test)`;
describe('AdGroups', () => __awaiter(this, void 0, void 0, function* () {
    const lib_instance = new __1.default({
        client_id: config_1.default.client_id,
        client_secret: config_1.default.client_secret,
        developer_token: config_1.default.developer_token,
    });
    const customer = lib_instance.Customer({
        customer_account_id: config_1.default.cid,
        manager_cid: config_1.default.manager_cid,
        refresh_token: config_1.default.refresh_token,
    });
    const campaign_id = 1485014801;
    let new_adgroup_id = '';
    let new_adgroup_id_1 = '';
    let new_adgroup_id_2 = '';
    it('Lists All AdGroups', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const adgroups = yield customer.adgroups.list({
            order_by: ['id', 'target_cpa_micros'],
            constraints: [{ 'campaign.id': campaign_id }, { status: 'ENABLED' }],
        });
        expect(adgroups).toBeInstanceOf(Array);
    }));
    it('Creates New AdGroup', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const new_adgroup = yield customer.adgroups.create({
            name: getRandomAdgroupName(),
            campaign_id,
        });
        expect(new_adgroup).toEqual({
            id: expect.any(String),
            resource_name: expect.any(String),
        });
        new_adgroup_id = new_adgroup.id;
        done();
    }));
    it('Creates 2 New AdGroups', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(2);
        const new_adgroups = yield customer.adgroups.create([
            {
                name: getRandomAdgroupName(),
                campaign_id,
            },
            {
                name: getRandomAdgroupName(),
                campaign_id,
            },
        ]);
        expect(new_adgroups).toContainEqual(expect.objectContaining({
            id: expect.any(String),
            resource_name: expect.any(String),
        }));
        const adgroup_ids = new_adgroups.map((x, i) => x.id);
        expect(adgroup_ids.length).toEqual(2);
        new_adgroup_id_1 = adgroup_ids[0];
        new_adgroup_id_2 = adgroup_ids[1];
        done();
    }));
    it('Retrieves Single AdGroup', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const adgroup = yield customer.adgroups.retrieve(new_adgroup_id);
        expect(new_adgroup_id).toContain(adgroup.id);
    }));
    it('Updates AdGroup', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const new_adgroup_name = getRandomAdgroupName();
        yield customer.adgroups.update({
            id: new_adgroup_id,
            update: {
                name: new_adgroup_name,
            },
        });
        const updated_adgroup = yield customer.adgroups.retrieve(new_adgroup_id);
        expect(updated_adgroup.name).toEqual(new_adgroup_name);
    }));
    it('Updates Multiple AdGroups', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(2);
        const new_adgroup_name_1 = getRandomAdgroupName();
        const new_adgroup_name_2 = getRandomAdgroupName();
        const update_config = [
            {
                id: new_adgroup_id_1,
                update: {
                    name: new_adgroup_name_1,
                },
            },
            {
                id: new_adgroup_id_2,
                update: {
                    name: new_adgroup_name_2,
                },
            },
        ];
        yield customer.adgroups.update(update_config);
        const updated_adgroup_1 = yield customer.adgroups.retrieve(new_adgroup_id_1);
        expect(updated_adgroup_1.name).toEqual(new_adgroup_name_1);
        const updated_adgroup_2 = yield customer.adgroups.retrieve(new_adgroup_id_2);
        expect(updated_adgroup_2.name).toEqual(new_adgroup_name_2);
    }));
    it('Deletes AdGroups', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(3);
        yield customer.adgroups.delete(new_adgroup_id);
        const adgroup = yield customer.adgroups.retrieve(new_adgroup_id);
        expect(adgroup.status).toBe('REMOVED');
        yield customer.adgroups.delete(new_adgroup_id_1);
        const adgroup1 = yield customer.adgroups.retrieve(new_adgroup_id_1);
        expect(adgroup1.status).toBe('REMOVED');
        yield customer.adgroups.delete(new_adgroup_id_2);
        const adgroup2 = yield customer.adgroups.retrieve(new_adgroup_id_2);
        expect(adgroup2.status).toBe('REMOVED');
    }));
}));
