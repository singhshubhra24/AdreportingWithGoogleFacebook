"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = __importDefault(require(".."));
const config_1 = __importDefault(require("../config"));
jest.setTimeout(30000);
const getRandomKeywordText = () => `test-keyword-${(Math.random() * 1000000 + 1).toFixed(0)}`;
describe('AdGroup Keywords', () => __awaiter(this, void 0, void 0, function* () {
    const lib_instance = new __1.default({
        client_id: config_1.default.client_id,
        client_secret: config_1.default.client_secret,
        developer_token: config_1.default.developer_token,
    });
    const customer = lib_instance.Customer({
        customer_account_id: config_1.default.cid,
        manager_cid: config_1.default.manager_cid,
        refresh_token: config_1.default.refresh_token,
    });
    const ad_group_id = 60170225920;
    let keyword_id = '';
    let keyword_id_1 = '';
    let keyword_id_2 = '';
    it('Lists All Keywords', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const keywords = yield customer.adgroupCriterions.list({
            constraints: ['ad_group.id =' + ad_group_id],
        });
        expect(keywords).toBeInstanceOf(Array);
        done();
    }));
    it('Creates New Keyword', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const keyword_text = getRandomKeywordText();
        const new_keyword = yield customer.keywords.create({
            ad_group_id,
            keyword: {
                text: keyword_text,
                match_type: 'BROAD',
            },
        });
        keyword_id = new_keyword.id;
        const keyword_data = yield customer.adgroupCriterions.retrieve(keyword_id);
        expect(keyword_data.keyword).toEqual({
            text: keyword_text,
            match_type: 'BROAD',
        });
        done();
    }));
    it('Creates 2 New Keywords', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(3);
        const keyword_text_1 = getRandomKeywordText();
        const keyword_text_2 = getRandomKeywordText();
        const new_keywords = yield customer.keywords.create([
            {
                ad_group_id,
                keyword: {
                    text: keyword_text_1,
                    match_type: 'BROAD',
                },
            },
            {
                ad_group_id,
                keyword: {
                    text: keyword_text_2,
                    match_type: 'BROAD',
                },
            },
        ]);
        expect(new_keywords).toContainEqual(expect.objectContaining({
            id: expect.any(String),
            resource_name: expect.any(String),
        }));
        const keyword_ids = new_keywords.map((x, i) => x.id);
        keyword_id_1 = keyword_ids[0];
        keyword_id_2 = keyword_ids[1];
        const keyword_data_1 = yield customer.adgroupCriterions.retrieve(keyword_id_1);
        expect(keyword_data_1.keyword).toEqual({
            text: keyword_text_1,
            match_type: 'BROAD',
        });
        const keyword_data_2 = yield customer.adgroupCriterions.retrieve(keyword_id_2);
        expect(keyword_data_2.keyword).toEqual({
            text: keyword_text_2,
            match_type: 'BROAD',
        });
        done();
    }));
    it('Retrieves Keyword Data', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        const keyword = yield customer.keywords.retrieve(keyword_id);
        expect(keyword_id).toContain(keyword.criterion_id);
        done();
    }));
    it('Updates Keyword', (done) => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(1);
        yield customer.adgroupCriterions.update({
            id: keyword_id,
            update: {
                status: 'PAUSED',
            },
        });
        const updated_keyword = yield customer.keywords.retrieve(keyword_id);
        expect(updated_keyword.status).toEqual('PAUSED');
        done();
    }));
    it('Updates Multiple Keywords', () => __awaiter(this, void 0, void 0, function* () {
        expect.assertions(2);
        const update_config = [
            {
                id: keyword_id_1,
                update: {
                    status: 'PAUSED',
                },
            },
            {
                id: keyword_id_2,
                update: {
                    status: 'PAUSED',
                },
            },
        ];
        yield customer.adgroupCriterions.update(update_config);
        const updated_keyword_1 = yield customer.keywords.retrieve(keyword_id_1);
        expect(updated_keyword_1.status).toEqual('PAUSED');
        const updated_keyword_2 = yield customer.keywords.retrieve(keyword_id_2);
        expect(updated_keyword_2.status).toEqual('PAUSED');
    }));
    // it('Deletes Keyword', async () => {
    //     expect.assertions(1)
    //     console.log(keyword_id)
    //     await customer.keywords.delete(keyword_id)
    //     const updated_keyword = await customer.keywords.retrieve(keyword_id)
    //     expect(updated_keyword.status).toEqual('REMOVED')
    // })
}));
